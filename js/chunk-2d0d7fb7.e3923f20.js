(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0d7fb7"],{"78aa":function(e,n,c){"use strict";c.r(n);var t=function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},a=[function(){var e=this,n=e.$createElement,c=e._self._c||n;return c("section",[c("html",[c("head"),c("body",[c("h2",[e._v("Redis缓存穿透，缓存击穿，缓存雪崩原因+解决方案")]),c("h3",[e._v("一、前言")]),c("p",[e._v("​ 在我们日常的开发中，无不都是使用数据库来进行数据的存储，由于一般的系统任务中通常不会存在高并发的情况，所以这样看起来并没有什么问题，可是一旦涉及大数据量的需求，比如一些商品抢购的情景，或者是主页访问量瞬间较大的时候，单一使用数据库来保存数据的系统会因为面向磁盘，磁盘读/写速度比较慢的问题而存在严重的性能弊端，一瞬间成千上万的请求到来，需要系统在极短的时间内完成成千上万次的读/写操作，这个时候往往不是数据库能够承受的，极其容易造成数据库系统瘫痪，最终导致服务宕机的严重生产问题。")]),c("p",[e._v("​ 为了克服上述的问题，项目通常会引入NoSQL技术，这是一种基于内存的数据库，并且提供一定的持久化功能。")]),c("p",[e._v("​ redis技术就是NoSQL技术中的一种，但是引入redis又有可能出现缓存穿透，缓存击穿，缓存雪崩等问题。")]),c("h3",[e._v("二、初认识")]),c("ul",[c("li",[e._v("缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。")]),c("li",[e._v("缓存击穿：key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。")]),c("li",[e._v("缓存雪崩：当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力。")])]),c("h3",[e._v("三、缓存穿透解决方案")]),c("p",[e._v("一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。")]),c("p",[c("strong",[e._v("有很多种方法可以有效地解决缓存穿透问题")]),e._v("，"),c("strong",[e._v("最常见")]),e._v("的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。"),c("strong",[e._v("另外也有一个")]),e._v("更为简单粗暴的方法（我们采用的就是这种），如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。")]),c("p",[c("strong",[e._v("粗暴方式伪代码：")])]),c("pre",{pre:!0},[c("code",{pre:!0,attrs:{"v-pre":""}},[e._v('//伪代码\npublic object GetProductListNew() {\n    int cacheTime = 30;\n    String cacheKey = "product_list";\n\n    String cacheValue = CacheHelper.Get(cacheKey);\n    if (cacheValue != null) {\n        return cacheValue;\n    }\n\n    cacheValue = CacheHelper.Get(cacheKey);\n    if (cacheValue != null) {\n        return cacheValue;\n    } else {\n        //数据库查询不到，为空\n        cacheValue = GetProductListFromDB();\n        if (cacheValue == null) {\n            //如果发现为空，设置个默认值，也缓存起来\n            cacheValue = string.Empty;\n        }\n        CacheHelper.Add(cacheKey, cacheValue, cacheTime);\n        return cacheValue;\n    }\n}\n')])]),c("h3",[e._v("四、缓存击穿解决方案")]),c("p",[e._v("key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。")]),c("p",[c("strong",[e._v("使用互斥锁(mutex key)")])]),c("p",[e._v("业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。")]),c("p",[e._v("SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果。")]),c("pre",{pre:!0},[c("code",{pre:!0,attrs:{"v-pre":""}},[e._v("public String get(key) {\n      String value = redis.get(key);\n      if (value == null) { //代表缓存值过期\n          //设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db\n      if (redis.setnx(key_mutex, 1, 3 * 60) == 1) {  //代表设置成功\n               value = db.get(key);\n                      redis.set(key, value, expire_secs);\n                      redis.del(key_mutex);\n              } else {  //这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可\n                      sleep(50);\n                      get(key);  //重试\n              }\n          } else {\n              return value;      \n          }\n }\n")])]),c("p",[e._v("memcache代码：")]),c("pre",{pre:!0},[c("code",{pre:!0,attrs:{"v-pre":""}},[e._v("if (memcache.get(key) == null) {  \n    // 3 min timeout to avoid mutex holder crash  \n    if (memcache.add(key_mutex, 3 * 60 * 1000) == true) {  \n        value = db.get(key);  \n        memcache.set(key, value);  \n        memcache.delete(key_mutex);  \n    } else {  \n        sleep(50);  \n        retry();  \n    }  \n}\n")])]),c("p",[c("strong",[e._v("其它方案：待各位补充。")])]),c("h3",[e._v("五、缓存雪崩解决方案")]),c("p",[e._v("与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key。")]),c("p",[e._v("缓存正常从Redis中获取，示意图如下： "),c("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/W5Wzice6Iz7gSqQ4UoogMtkSMWGWgynS8GtMu35osT9yED1ZE5CCjj0t5E7wPdU01zpMqc6rkYUiabID3YhFz1Lw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"redis1.md"}})]),c("p",[e._v("缓存失效瞬间示意图如下： "),c("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/W5Wzice6Iz7gSqQ4UoogMtkSMWGWgynS8oQtvBSortCptOZwgeUyJ6a69Aib1GEVl6vLKwY7TyVWOJHBfNPyWSpg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"redis2.md"}})]),c("p",[e._v("缓存失效时的雪崩效应对底层系统的冲击非常可怕！大多数系统设计者考虑用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。还有一个简单方案就时讲缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。")]),c("p",[c("strong",[e._v("加锁排队，伪代码如下：")])]),c("pre",{pre:!0},[c("code",{pre:!0,attrs:{"v-pre":""}},[e._v('//伪代码\npublic object GetProductListNew() {\n    int cacheTime = 30;\n    String cacheKey = "product_list";\n    String lockKey = cacheKey;\n\n    String cacheValue = CacheHelper.get(cacheKey);\n    if (cacheValue != null) {\n        return cacheValue;\n    } else {\n        synchronized(lockKey) {\n            cacheValue = CacheHelper.get(cacheKey);\n            if (cacheValue != null) {\n                return cacheValue;\n            } else {\n              //这里一般是sql查询数据\n                cacheValue = GetProductListFromDB(); \n                CacheHelper.Add(cacheKey, cacheValue, cacheTime);\n            }\n        }\n        return cacheValue;\n    }\n}\n')])]),c("p",[e._v("加锁排队只是为了减轻数据库的压力，并没有提高系统吞吐量。假设在高并发下，缓存重建期间key是锁着的，这是过来1000个请求999个都在阻塞的。同样会导致用户等待超时，这是个治标不治本的方法！")]),c("p",[e._v("注意：加锁排队的解决方式分布式环境的并发问题，有可能还要解决分布式锁的问题；线程还会被阻塞，用户体验很差！因此，在真正的高并发场景下很少使用！")]),c("p",[c("strong",[e._v("随机值伪代码：")])]),c("pre",{pre:!0},[c("code",{pre:!0,attrs:{"v-pre":""}},[e._v('//伪代码\npublic object GetProductListNew() {\n    int cacheTime = 30;\n    String cacheKey = "product_list";\n    //缓存标记\n    String cacheSign = cacheKey + "_sign";\n\n    String sign = CacheHelper.Get(cacheSign);\n    //获取缓存值\n    String cacheValue = CacheHelper.Get(cacheKey);\n    if (sign != null) {\n        return cacheValue; //未过期，直接返回\n    } else {\n        CacheHelper.Add(cacheSign, "1", cacheTime);\n        ThreadPool.QueueUserWorkItem((arg) -> {\n      //这里一般是 sql查询数据\n            cacheValue = GetProductListFromDB(); \n          //日期设缓存时间的2倍，用于脏读\n          CacheHelper.Add(cacheKey, cacheValue, cacheTime * 2);                 \n        });\n        return cacheValue;\n    }\n} \n')])]),c("p",[c("strong",[e._v("解释说明：")])]),c("ul",[c("li",[e._v("缓存标记：记录缓存数据是否过期，如果过期会触发通知另外的线程在后台去更新实际key的缓存；")]),c("li",[e._v("缓存数据：它的过期时间比缓存标记的时间延长1倍，例：标记缓存时间30分钟，数据缓存设置为60分钟。这样，当缓存标记key过期后，实际缓存还能把旧数据返回给调用端，直到另外的线程在后台更新完成后，才会返回新缓存。")])]),c("p",[e._v("关于缓存崩溃的解决方法，这里提出了三种方案：使用锁或队列、设置过期标志更新缓存、为key设置不同的缓存失效时间，还有一种被称为“二级缓存”的解决方法。")]),c("h3",[e._v("六、小结")]),c("p",[e._v("针对业务系统，永远都是具体情况具体分析，没有最好，只有最合适。")])])])])}],r=c("2877"),l={},i=Object(r["a"])(l,t,a,!1,null,null,null);n["default"]=i.exports}}]);
//# sourceMappingURL=chunk-2d0d7fb7.e3923f20.js.map